/*
 * This file serves as the interface between the ChampSim cache system and the
 * object-oriented implementation of STeMS. See the "stems" directory for the
 * actual implementation and all supporting files.
 *
 * The reason this file exists is to expose the STeMS prefetcher as an option
 * in the build_champsim.sh script and also provide greater modularity in the
 * actual stems_prefetcher code.
 *
 * Implementation author: Arka Majumdar
 */

#include "stems/stems.h"

#include "cache.h"

using namespace std;
using namespace stems;

/*
 * Create an anonymous namespace so there are no naming conflicts between
 * "g_prefetcher_for_cpu" and any other
 */
namespace {
/*
 * Maintain one stems_prefetcher per CPU.
 */
stems_prefetcher* g_prefetcher_for_cpu[NUM_CPUS];
}

void CACHE::l1d_prefetcher_initialize() {
    g_prefetcher_for_cpu[cpu] = new stems_prefetcher(this);
    cout << "CPU " << cpu << " L1D STeMS prefetcher" << endl;
}

void CACHE::l1d_prefetcher_operate(uint64_t addr, uint64_t ip,
        uint8_t cache_hit, uint8_t type) {
    g_prefetcher_for_cpu[cpu]->operate(addr, ip, cache_hit == 1, type);
}

void CACHE::l1d_prefetcher_cache_fill(uint64_t addr, uint32_t set, uint32_t way,
        uint8_t prefetch, uint64_t evicted_addr) {
    /*
     * Operation unsupported. Do nothing.
     */
}

void CACHE::l1d_prefetcher_final_stats() {
    for (pair<string, stat> pair : g_prefetcher_for_cpu[cpu]->stats()) {
        cout << pair.first << "=" << pair.second << endl;
    }
    // This is the final call to this prefetcher (as indicated by the name of the method).
    // We should delete the heap-allocated prefetcher object for this CPU now.
    delete g_prefetcher_for_cpu[cpu];
}

void CACHE::inform_eviction(uint64_t address) {
    g_prefetcher_for_cpu[cpu]->inform_eviction(address);
}

bool CACHE::access_svb(uint8_t type, PACKET* packet) {
    return g_prefetcher_for_cpu[cpu]->access_svb(type, packet);
}

void CACHE::fill_svb(PACKET* packet) {
    g_prefetcher_for_cpu[cpu]->fill_svb(packet);
}
